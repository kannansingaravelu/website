{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p><code>quantmod-python</code> package is by the quantmod package for R. This new tool is designed to assist quantitative traders and data analysts with the development, testing, and rapid prototyping of trading strategies. quantmod features a straightforward and intuitive interface aimed at simplifying workflows and boosting productivity.</p> <p>The package is developed and maintained by Kannan Singaravelu.</p>"},{"location":"#user-installation","title":"User installation","text":"<p>The easiest way to install quantmod is using pip:</p> <pre><code>pip install quantmod-python\n</code></pre>"},{"location":"#modules","title":"Modules","text":"<ul> <li>markets</li> <li>models </li> <li>risk</li> <li>timeseries </li> <li>indicators</li> <li>derivatives</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p><pre><code># Retrieves market data &amp; ticker object \nfrom quantmod.markets import getData, getTicker\n\n# Option price\nfrom quantmod.models import OptionInputs, BlackScholesOptionPricing, MonteCarloOptionPricing\n\n# Calculates price return of different time period.\nfrom quantmod.timeseries import *\n\n# Technical indicators\nfrom quantmod.indicators import ATR\n\n# Derivatives functions\nfrom quantmod.derivatives import maxpain\n</code></pre>  Note: quantmod is currently under active development, and anticipate ongoing enhancements and additions. The aim is to continually improve the package and expand its capabilities to meet the evolving needs of the community.</p>"},{"location":"#examples","title":"Examples","text":"<p>Refer to the examples section for more details.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>Refer here</p>"},{"location":"#legal","title":"Legal","text":"<p><code>quatmod</code> is distributed under the Apache Software License. See the LICENSE.txt file in the release for details.</p>"},{"location":"about/","title":"About","text":"<p><code>quantmod-python</code> is inspired by the quantmod R-package. This new tool is designed to assist quantitative traders and data analysts with the development, testing, and rapid prototyping of trading strategies. quantmod features a straightforward and intuitive interface aimed at simplifying workflows and boosting productivity.</p> <p>Currently, quantmod is under active development, and anticipate ongoing enhancements and additions. The aim is to continually improve the package and expand its capabilities to meet the evolving needs of the community.</p> <p>I encourage you to explore quantmod and provide your feedback. Your insights will be instrumental in guiding future updates and ensuring the package meets the needs of its users.</p>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#003","title":"0.0.3","text":"<ul> <li>modified earlier var class structure</li> <li>added parametric, montecarlo, conditional var </li> <li>added varbacktester </li> </ul>"},{"location":"changelog/#002","title":"0.0.2","text":"<ul> <li>Added risk module</li> </ul>"},{"location":"changelog/#001","title":"0.0.1","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"derivatives/","title":"Derivatives","text":""},{"location":"derivatives/#derivatives-functions","title":"Functions","text":""},{"location":"derivatives/#derivatives.maxpain","title":"maxpain","text":"<pre><code>maxpain(strike: list, calloi: list, putoi: list) -&gt; float\n</code></pre> <p>Calculate option max pain for a given range of strike price, call and put open interest Max pain is the (strike) price at which least amount of pain (money is lost) by option writers, thereby causing maximum pain to option buyers. This level  is assumed to be the price at which the market is most likely to expire on  the (derivatives) contract mautiry date.</p> <p>Parameters:</p> Name Type Description Default <code>strike</code> <code>list</code> <p>list of strike prices</p> required <code>calloi</code> <code>list</code> <p>list of call open interest</p> required <code>putoi</code> <code>list</code> <p>list of put open interst</p> required <p>Returns:</p> Type Description <code>float</code> <p>maximum pain strike level</p>"},{"location":"indicators/","title":"Indicators","text":""},{"location":"indicators/#indicators-functions","title":"Functions","text":""},{"location":"indicators/#indicators.ATR","title":"ATR","text":"<pre><code>ATR(df: pd.DataFrame, lookback: int = 14) -&gt; pd.Series\n</code></pre> <p>Calculate the Average True Range (ATR).</p> <p>ATR is a volatility indicator that measures the average of the true range values over a specified period. An expanding ATR indicates increased volatility, while a low ATR value indicates a series of periods with small price ranges.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame with OHLC (Open, High, Low, Close) price data.</p> required <code>lookback</code> <code>int</code> <p>Number of periods to use for ATR calculation, by default 14.</p> <code>14</code> <p>Returns:</p> Type Description <code>Series</code> <p>A pandas Series containing the ATR values for each period.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame({\n...     'Open': [10, 11, 12],\n...     'High': [12, 13, 14],\n...     'Low': [9, 10, 11],\n...     'Close': [11, 12, 13]\n... })\n&gt;&gt;&gt; atr = ATR(df, lookback=2)\n&gt;&gt;&gt; print(atr)\n0         NaN\n1    3.000000\n2    2.750000\ndtype: float64\n</code></pre>"},{"location":"license/","title":"Legal","text":"<p><code>quatmod-python</code> is distributed under the Apache Software License. See the LICENSE.txt file in the release for details.</p>"},{"location":"markets/","title":"Markets","text":""},{"location":"markets/#markets-functions","title":"Functions","text":""},{"location":"markets/#markets.getData","title":"getData","text":"<pre><code>getData(tickers: Union[str, List[str]], start_date: str = None, end_date: str = None, period: str = '1mo', interval: str = '1d') -&gt; pd.DataFrame\n</code></pre> <p>Retrieve data from yfinance library for specified tickers.</p> <p>Parameters:</p> Name Type Description Default <code>tickers</code> <code>str or list</code> <p>symbol or list of symbols</p> required <code>start</code> <code>str</code> <p>start date, by default None</p> required <code>end</code> <code>str</code> <p>end date, by default None</p> required <code>period</code> <code>str</code> <p>period, by default '1mo' valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max</p> <code>'1mo'</code> <code>interval</code> <code>str</code> <p>interval, by default '1d', max 60 days valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo</p> <code>'1d'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with OHLC[A]V (Open, High, Low, Close, Adj Close, Volume).</p>"},{"location":"markets/#markets.getTicker","title":"getTicker","text":"<pre><code>getTicker(ticker: str) -&gt; yf.Ticker\n</code></pre> <p>Retrieve ticker object from yfinance library.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>symbol</p> required <p>Returns:</p> Type Description <code>Ticker</code> <p>Ticker object</p>"},{"location":"models/","title":"Models","text":""},{"location":"models/#models-classes","title":"Classes","text":""},{"location":"models/#models.BlackScholesOptionPricing","title":"BlackScholesOptionPricing","text":"<p>Class for Black-Scholes Option Pricing</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>OptionInputs</code> <p>Option inputs parameters</p> required <p>Returns:</p> Name Type Description <code>attributes</code> <code>float</code> <p>call_price, put_price</p> <p>call_delta, put_delta </p> <p>gamma </p> <p>vega</p> <p>call_theta, put_theta</p> <p>call_rho, put_rho</p> <p>impvol</p>"},{"location":"models/#models.MonteCarloOptionPricing","title":"MonteCarloOptionPricing","text":"<p>Class for Monte Carlo Option Pricing</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>OptionInputs</code> <p>Option inputs parameters</p> required <code>initialspot</code> <code>float</code> <p>Initial stock price</p> <code>Field(..., gt=0, description='Initial stock price')</code> <code>nsims</code> <code>int</code> <p>Number of simulations</p> <code>Field(..., gt=0, description='Number of simulations')</code> <code>timestep</code> <code>int</code> <p>Timestep, by default 252</p> <code>252</code> <code>barrier</code> <code>float</code> <p>Barrier, by default None</p> <code>None</code> <code>rebate</code> <code>int</code> <p>Rebate, by default None</p> <code>None</code> <p>Returns:</p> Name Type Description <code>attributes</code> <code>float</code> <p>call_vanilla, put_vanilla</p> <p>call_asian, put_asian</p> <p>upandoutcall</p>"},{"location":"models/#models.OptionInputs","title":"OptionInputs","text":"<p>               Bases: <code>BaseModel</code></p> <p>Option inputs parameters</p> <p>Parameters:</p> Name Type Description Default <code>spot</code> <code>float</code> <p>Spot price of the underlying asset</p> required <code>strike</code> <code>float</code> <p>Strike price of the option</p> required <code>rate</code> <code>float</code> <p>Risk-free interest rate</p> required <code>ttm</code> <code>float</code> <p>Time to maturity in years</p> required <code>volatility</code> <code>float</code> <p>Volatility of the underlying asset</p> required <code>callprice</code> <code>float | None</code> <p>Default is None Market price of the call option</p> required <code>putprice</code> <code>float | None</code> <p>Default is None Market price of the put option</p> required <p>Returns:</p> Type Description <code>OptionInputs</code> <p>Option inputs parameters</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the input parameters are invalid</p>"},{"location":"risk/","title":"Risk","text":""},{"location":"risk/#risk-classes","title":"Classes","text":""},{"location":"risk/#risk.ConditionalVaR","title":"ConditionalVaR","text":"<p>Class to calculate Conditional Value at Risk (CVaR) aka Expected Shortfall (ES) based on historical returns and confidence level</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>RiskInputs</code> <p>An instance of Risk inputs containing returns and confidence level</p> required <p>Returns:</p> Name Type Description <code>attributes</code> <code>float</code> <p>CVaR</p>"},{"location":"risk/#risk.RiskInputs","title":"RiskInputs","text":"<p>               Bases: <code>BaseModel</code></p> <p>RiskInputs parameters</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>List[float]</code> <p>List of historical returns</p> required <code>confidence_level</code> <code>float</code> <p>The confidence level for the VaR calculation</p> required <p>Returns:</p> Type Description <code>RiskInputs</code> <p>RiskInputs parameters</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the input parameters are invalid</p>"},{"location":"risk/#risk.ValueAtRisk","title":"ValueAtRisk","text":"<p>Class to calculate Value at Risk (VaR) based on returns and confidence level</p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>RiskInputs</code> <p>An instance of Risk inputs containing returns and confidence level</p> required <code>method</code> <code>Literal['historical', 'parametric', 'montecarlo']</code> <p>The method to calculate VaR, by default 'historical'</p> required <p>Returns:</p> Name Type Description <code>attributes</code> <code>float</code> <p>var</p>"},{"location":"risk/#risk.VarBacktester","title":"VarBacktester","text":"<p>Class to perform a backtest for Value at Risk (VaR) calculations with non-overlapping windows  </p> <p>Parameters:</p> Name Type Description Default <code>inputs</code> <code>RiskInputs</code> <p>An instance of Risk inputs containing returns and confidence level</p> required <code>window_volatility</code> <code>int</code> <p>The window size for the rolling volatility calculation, by default 21</p> <code>21</code> <code>window_forward</code> <code>int</code> <p>The window size for the rolling forward calculation, by default 10</p> <code>10</code> <p>Returns:</p> Name Type Description <code>attributes</code> <code>tabular output</code> <p>run</p>"},{"location":"timeseries/","title":"Timeseries","text":""},{"location":"timeseries/#timeseries-functions","title":"Functions","text":""},{"location":"timeseries/#timeseries.Ad","title":"Ad","text":"<pre><code>Ad(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter adj close price</p>"},{"location":"timeseries/#timeseries.Cl","title":"Cl","text":"<pre><code>Cl(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter close price</p>"},{"location":"timeseries/#timeseries.Gap","title":"Gap","text":"<pre><code>Gap(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Measure Gap up / down in percentage</p>"},{"location":"timeseries/#timeseries.Hi","title":"Hi","text":"<pre><code>Hi(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter high price</p>"},{"location":"timeseries/#timeseries.HiCl","title":"HiCl","text":"<pre><code>HiCl(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>High to Close difference</p>"},{"location":"timeseries/#timeseries.HiLo","title":"HiLo","text":"<pre><code>HiLo(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>High to Low difference</p>"},{"location":"timeseries/#timeseries.Lo","title":"Lo","text":"<pre><code>Lo(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter low price</p>"},{"location":"timeseries/#timeseries.LoCl","title":"LoCl","text":"<pre><code>LoCl(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Low to Close difference</p>"},{"location":"timeseries/#timeseries.Op","title":"Op","text":"<pre><code>Op(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter open price</p>"},{"location":"timeseries/#timeseries.OpCl","title":"OpCl","text":"<pre><code>OpCl(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Open to Close difference</p>"},{"location":"timeseries/#timeseries.OpHi","title":"OpHi","text":"<pre><code>OpHi(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Open to High difference</p>"},{"location":"timeseries/#timeseries.OpLo","title":"OpLo","text":"<pre><code>OpLo(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Open to Low difference</p>"},{"location":"timeseries/#timeseries.Vo","title":"Vo","text":"<pre><code>Vo(df: pd.DataFrame) -&gt; pd.Series\n</code></pre> <p>Filter volume</p>"},{"location":"timeseries/#timeseries.allReturn","title":"allReturn","text":"<pre><code>allReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates annual returns for the specified inputs.</p>"},{"location":"timeseries/#timeseries.annualReturn","title":"annualReturn","text":"<pre><code>annualReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates annual returns for the specified inputs.</p>"},{"location":"timeseries/#timeseries.cagr","title":"cagr","text":"<pre><code>cagr(returns: pd.Series, intra_period: int = 1, is_log: bool = False) -&gt; float\n</code></pre> <p>Compounded Annual Growth Rate (CAGR) is the annual rate of return</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>Series</code> <p>price series</p> required <code>intra_period</code> <code>int</code> <p>period of intra-period returns, defaults to 1 for annual timeframe</p> <code>1</code> <code>is_log</code> <code>bool</code> <p>defaults to False if its simple return</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>returns CAGR for the specified period</p> Notes <pre><code>CAGR = (Ending Value / Starting Value)^(1/n) - 1\n\n    Ending Value = Begging Value \n    Starting Value = Ending Value \n    n = period of intra-period returns\n</code></pre>"},{"location":"timeseries/#timeseries.calmar","title":"calmar","text":"<pre><code>calmar(returns: pd.Series, is_log: bool = False) -&gt; float\n</code></pre> <p>Ratio of compounded annual growth rate and maximum drawdown. It is a measure of risk adjusted return. Lower the ratio, the worse the performance on a risk-adjusted basis.</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>Series</code> <p>price series</p> required <code>is_log</code> <code>bool</code> <p>defaults to False if its simple return</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>returns calmar ratio</p> Notes <pre><code>Calmar Ratio = CAGR / MDD\n\nCAGR = (Ending Value / Starting Value)^(1/n) - 1\nMDD = (Peak Value - Lowest Value) - Peak Value\n</code></pre>"},{"location":"timeseries/#timeseries.dailyReturn","title":"dailyReturn","text":"<pre><code>dailyReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates daily returns for the specified inputs.</p>"},{"location":"timeseries/#timeseries.first","title":"first","text":"<pre><code>first(series: pd.Series) -&gt; float\n</code></pre> <p>Return first value of input series</p>"},{"location":"timeseries/#timeseries.lag","title":"lag","text":"<pre><code>lag(series: pd.Series, period: int = 1) -&gt; pd.Series\n</code></pre> <p>Return previous value of input series</p>"},{"location":"timeseries/#timeseries.last","title":"last","text":"<pre><code>last(series: pd.Series) -&gt; float\n</code></pre> <p>Return last value of input series</p>"},{"location":"timeseries/#timeseries.lead","title":"lead","text":"<pre><code>lead(series: pd.Series, period: int = 1) -&gt; pd.Series\n</code></pre> <p>Return next value of input series</p>"},{"location":"timeseries/#timeseries.maxdd","title":"maxdd","text":"<pre><code>maxdd(returns: pd.Series, is_log: bool = False) -&gt; float\n</code></pre> <p>A maximum drawdown (MDD) is an indicator of downside risk and measures the largest percentage drop of the cumulative return over a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>Series</code> <p>price series</p> required <code>is_log</code> <code>bool</code> <p>defaults to False if its simple return</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>returns MDD for the specified period in percentage</p> Notes <pre><code>It observes the maximum loss from a peak to a trough of a portfolio before\na new peak is attained.\n\nMDD = (Peak Value - Lowest Value) / Peak Value\n\n    Peak Value = Highest Value of the cumulative return\n    Lowest Value = Lowest Value of the cumulative return\n</code></pre>"},{"location":"timeseries/#timeseries.monthlyReturn","title":"monthlyReturn","text":"<pre><code>monthlyReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates monthly returns for the specified inputs.</p>"},{"location":"timeseries/#timeseries.periodReturn","title":"periodReturn","text":"<pre><code>periodReturn(series: pd.Series, period: str = None) -&gt; pd.DataFrame\n</code></pre> <p>Calculates periodic returns for the specified inputs</p> <p>Parameters:</p> Name Type Description Default <code>series</code> <code>Series</code> <p>price series</p> required <code>period</code> <code>str</code> <p>None, defaults to daily frequency Sepcifiy W, M, Q and A for weekly, monthly, quarterly and annual frequency</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>resampled dataframe series of log returns</p>"},{"location":"timeseries/#timeseries.quarterlyReturn","title":"quarterlyReturn","text":"<pre><code>quarterlyReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates quarterly returns for the specified inputs.</p>"},{"location":"timeseries/#timeseries.seriesHi","title":"seriesHi","text":"<pre><code>seriesHi(series: pd.Series) -&gt; pd.DataFrame\n</code></pre> <p>Return the high of a given series.</p>"},{"location":"timeseries/#timeseries.seriesLo","title":"seriesLo","text":"<pre><code>seriesLo(series: pd.Series) -&gt; pd.DataFrame\n</code></pre> <p>Return the low of a given series.</p>"},{"location":"timeseries/#timeseries.sharpe","title":"sharpe","text":"<pre><code>sharpe(returns: pd.Series, is_log: bool = False, rf: float = 0.0) -&gt; float\n</code></pre> <p>Sharpe ratio is the average return earned in excess of the risk free return for every unit of volatility. This is one of the most widely used meausre of risk adjusted return. Sharpe ration greater than 1 is considered to be good.</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>Series</code> <p>price series</p> required <code>is_log</code> <code>bool</code> <p>defaults to False if its simple return</p> <code>False</code> <code>rf</code> <code>float</code> <p>RiskFree rate of return, defaults to 0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>returns sharpe ratio</p> Notes <pre><code>Sharpe Ratio = (Expected Return - RiskFree Return) / Volatility of Returns\n</code></pre>"},{"location":"timeseries/#timeseries.trend_score","title":"trend_score","text":"<pre><code>trend_score(df: Union[pd.DataFrame, pd.Series]) -&gt; float\n</code></pre> <p>Calculate trend score, a statistical measure to identify the strength of the time series. Range between -1 to +1.</p>"},{"location":"timeseries/#timeseries.volatility","title":"volatility","text":"<pre><code>volatility(returns: pd.Series, intra_period: int = 1) -&gt; float\n</code></pre> <p>Annualized volatility is key risk metrics</p> <p>Parameters:</p> Name Type Description Default <code>returns</code> <code>Series</code> <p>price series</p> required <code>intra_period</code> <code>int</code> <p>period of intra-period returns, defaults to 1 for annual timeframe</p> <code>1</code> <p>Returns:</p> Type Description <code>float</code> <p>returns annualized volatility</p> Notes <pre><code>Annualization is achieved by multiplying volatility with square root of\na) 252 to annualize daily volatility\nb) 52 to annualize weekly volatility\nc) 12 to annualize monthly volatility\n</code></pre>"},{"location":"timeseries/#timeseries.weeklyReturn","title":"weeklyReturn","text":"<pre><code>weeklyReturn(df: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Calculates weekly returns for the specified inputs.</p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>Install <code>quantmod</code> using <code>pip</code>:</p> <pre><code>pip install quantmod-python \n</code></pre>"},{"location":"user-guide/examples/optionpricing/","title":"Option Pricing","text":"<p>Models uses pydantic to create a data model for option inputs. Refer the following implementation of the Black Scholes amd Monte Carlo option pricing methods.</p> <pre><code>import numpy as np\nfrom tabulate import tabulate\nfrom quantmod.models import OptionInputs, BlackScholesOptionPricing, MonteCarloOptionPricing\n\n\n# Get the option inputs parameters\ninputs=OptionInputs(\n    spot=100,\n    strike=100,\n    ttm=1,\n    rate=0.05,\n    volatility=0.2,\n    callprice=8.0\n    )\n\n\n# 1. Black Scholes Option Pricing\n# Initialize the BS Option Pricing Engine\noption = BlackScholesOptionPricing(inputs=inputs)\n\n# Print the BS option price\nheader = ['Option Price', 'Delta', 'Gamma', 'Theta', 'Vega', 'Rho', 'IV']\ntable = [[option.call_price, option.call_delta, option.gamma, option.call_theta, option.vega, option.call_rho, option.impvol],]\nprint(tabulate(np.around(table, 4), headers=header))\n\n\n# 2. Monte Carlo Option Pricing\n# Initialize the MC Option Pricing Engine\nmcoption = MonteCarloOptionPricing(\n        inputs=inputs,\n        initialspot=100,\n        nsims=100000,\n        timestep=252,\n        barrier=150,\n        rebate=10\n    )\n\nprint(f\"Vanilla Option: CallPrice &gt; {mcoption.call_vanilla:0.4f}, PutPrice &gt; {mcoption.put_vanilla:0.4f}\")\nprint(f\"Asian Option: CallPrice &gt; {mcoption.call_asian:0.4f}, PutPrice &gt; {mcoption.put_asian:0.4f}\")\nprint(f\"Up and out Option: CallPrice &gt; {mcoption.upandoutcall:0.4f}\")\n</code></pre>"},{"location":"user-guide/examples/performance/","title":"Asset Performance","text":"<p>Timeseries expects data in the yahoo finance format: OHLC[A]V. Calculates price return of different time period.</p> <pre><code>from quantmod.markets import getData\nfrom quantmod.timeseries import *\n\ndf = getData('SPY', period='2y')\n\n# Get period returns for a specific frequency\n# use \"period\" to specify the frequency\n# valid frequency: week, month, quarter, annual, all. \n# None defaults to daily\nprint(f\"Periodic Return: {periodReturn(df.Close, period='week')}\")\n\n# Alternatively derive retuns as specified below\n# get daily returns\nprint(f\"Daily Return: {dailyReturn(df.Close)}\")\n\n# get weekly returns\nprint(f\"Weekly Return: {weeklyReturn(df.Close)}\")\n\n# get quarterly returns\nprint(f\"Quarterly Return: {quarterlyReturn(df.Close)}\")\n\n# get monthly returns\nprint(f\"Monthly Return: {monthlyReturn(df.Close)}\")\n\n# get annual returns\nprint(f\"Annual Return: {annualReturn(df.Close)}\")\n\n# get all returns : daily, weekly, quarterly, monthly and annual \nprint(f\"All Return: {allReturn(df.Close)}\")\n</code></pre>"},{"location":"user-guide/examples/risk/","title":"Risk Measures","text":"<p>The risk module provides a set of risk metrics to measure the risk associated with a portfolio such as Value at Risk (VaR) and Conditional Value at Risk (CVaR).</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom quantmod.risk import (\n    RiskInputs, \n    ValueAtRisk, \n    ConditionalVaR, \n    VarBacktester\n)\n\n\nif __name__ == \"__main__\":\n    df = pd.read_csv(\"data.csv\", index_col=0, parse_dates=True)['ICICIBANK']\n    log_returns = np.diff(np.log(df))\n\n    var = ValueAtRisk(inputs=RiskInputs(returns=log_returns, confidence_level=0.99), method='historical').var\n    es = ConditionalVaR(inputs=RiskInputs(returns=log_returns, confidence_level=0.99)).cvar\n\n    # Historical VaR and CVaR\n    print(f\"Historical VaR: {var}\")\n    print(f\"Historical CVaR: {es} \\n\")\n\n    # VaR Backtest\n    backtest_results = VarBacktester(inputs=RiskInputs(returns=log_returns, confidence_level=0.99)).run\n    print(f\"Backtested VaR Results: \\n {backtest_results}\")\n</code></pre>"},{"location":"user-guide/examples/stockprice/","title":"Data Retrieval","text":"<p>Retrieves market data &amp; ticker object from yahoo finance from quantmod.markets import <code>getData</code>, <code>getTicker</code></p> <pre><code>from quantmod.markets import getData, getTicker\n\n# Get stock price data\naapl = getData('AAPL', period='5d')\n\n# Get ticker object\nspy = getTicker('SPY')\n\n# Print the stock price data\nprint(aapl)\n\n# Print the ticker object output\nprint(spy.options[:5])\n</code></pre>"},{"location":"user-guide/examples/timeseries/","title":"Time Series Analysis","text":"<p>Timeseries expects data in the yahoo finance format: OHLC[A]V. Module offers a variety of tools to handle most common modeling and feature engineering needs.</p> <pre><code>from quantmod.markets import getData\nfrom quantmod.timeseries import *\n\ndf = getData('AAPL', period='5d') \nprint(df)\n\n# lag: return previous value of the timeseries\nprint(f\" Previous Value: {lag(df.Close, period=1)}\") \n\n# lead: return next value of the timeseries\nprint(f\" Next Value: {lead(df.Close, period=1)}\")   \n\n# fist: return first value of the timeseries\nprint(f\" First Value: {first(df.Close)}\")   \n\n# last: return last value of the timeseries\nprint(f\" Last Value: {last(df.Close)}\")\n\n# gap: measure gap up / down in percentage\nprint(f\" Gap Percentage: {Gap(df)}\")\n</code></pre>"}]}